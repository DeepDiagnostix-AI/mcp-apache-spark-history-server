version: '3'

output: group

vars:
  PROJECT_NAME: spark-history-server-mcp
  PYTHON_VERSION: 3.12
  OS: '{{OS}}'
  ARCH: '{{ARCH}}'
  BIN_DIR: .bin
  HELM_VERSION: v3.18.3
  KIND_VERSION: v0.29.0
  KIND_CLUSTER_NAME: spark-history-server-mcp
  KUBECONFIG_PATH: ./kubeconfig.yaml
  SHS_HELM_VERSION: 1.5.0
  SHS_HELM_URL: https://kubedai.github.io/spark-history-server

run: once

tasks:
  check-uv:
    desc: Check if uv is installed and install if needed
    cmds:
      - |
        if ! command -v uv &> /dev/null; then
          echo "📦 Installing uv..."
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.local/bin:$PATH"
          echo "✅ uv installed! Please restart your terminal or run: export PATH=\"\$HOME/.local/bin:\$PATH\""
        else
          echo "✅ uv is already installed"
        fi

  install:
    desc: Install project dependencies
    deps: [check-uv]
    cmds:
      - uv sync --group dev
      - echo "✅ Dependencies installed!"

  install-helm:
    desc: Install Helm binary to local .bin directory
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - curl -fsSL -o helm.tar.gz https://get.helm.sh/helm-{{.HELM_VERSION}}-{{OS}}-{{ARCH}}.tar.gz
      - tar -zxvf helm.tar.gz
      - mv {{OS}}-{{ARCH}}/helm {{.BIN_DIR}}/
      - rm -rf helm.tar.gz {{OS}}-{{ARCH}}
      - echo "Helm {{.HELM_VERSION}} installed to {{.BIN_DIR}}/helm"
    status:
      - test -f {{.BIN_DIR}}/helm

  install-kind:
    desc: Install Kind binary to local .bin directory
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - curl -fsSL -o {{.BIN_DIR}}/kind https://kind.sigs.k8s.io/dl/{{.KIND_VERSION}}/kind-{{OS}}-{{ARCH}}
      - chmod +x {{.BIN_DIR}}/kind
      - echo "Kind {{.KIND_VERSION}} installed to {{.BIN_DIR}}/kind"
    status:
      - test -f {{.BIN_DIR}}/kind

  delete-cluster:
    desc: Delete the Kind cluster
    deps: [install-helm]
    cmds:
      - "{{.BIN_DIR}}/kind delete cluster --name {{.KIND_CLUSTER_NAME}}"
      - echo "🗑️ Kind cluster '{{.KIND_CLUSTER_NAME}}' deleted"
    status:
      - "! {{.BIN_DIR}}/kind get clusters 2>/dev/null | grep -q '^{{.KIND_CLUSTER_NAME}}$'"

  lint:
    desc: Run code linting with ruff
    cmds:
      - uv run ruff check .
      - echo "✅ Linting completed!"

  format:
    desc: Format code with ruff
    cmds:
      - uv run ruff format .
      - echo "✅ Code formatted!"

  lint-fix:
    desc: Run linting with auto-fix
    cmds:
      - uv run ruff check --fix .
      - echo "✅ Linting issues fixed!"

  type-check:
    desc: Run type checking with mypy
    cmds:
      - uv run mypy *.py --ignore-missing-imports
      - echo "✅ Type checking completed!"

  test:
    desc: Run tests with pytest
    cmds:
      - uv run pytest --cov=. -cov-report=xml --cov-report=term-missing .
      - echo "✅ Tests completed!"

  test-e2e:
    desc: Run end-to-end tests with Spark and MCP servers
    deps: [start-spark-bg, start-mcp-bg]
    cmds:
      - echo "🧪 Starting end-to-end tests..."
      - |
        echo "Waiting for services to be available..."
        # Wait for Spark History Server on port 18080
        while ! curl -s http://localhost:18080 > /dev/null; do
          echo "Waiting for Spark History Server..."
          sleep 1
        done
        echo "✅ Spark History Server is available"

        # Wait for MCP Server on port 18888
        while ! curl -s http://localhost:18888 > /dev/null; do
          echo "Waiting for MCP Server..."
          sleep 1
        done
        echo "✅ MCP Server is available"
      - |
        echo "Running e2e tests..."
        uv run pytest tests/e2e.py -v
      - task: stop-all
  test-verbose:
    desc: Run tests with verbose output
    cmds:
      - uv run pytest -v --cov=. --cov-report=term-missing

  security:
    desc: Run security scan with bandit
    cmds:
      - uv run bandit -r . -f json -o bandit-report.json
      - echo "✅ Security scan completed! Check bandit-report.json"

  pre-commit:
    desc: Run all pre-commit checks
    cmds:
      - uv run pre-commit run --all-files
      - echo "✅ Pre-commit checks completed!"

  pre-commit-install:
    desc: Install pre-commit hooks
    cmds:
      - uv run pre-commit install
      - echo "✅ Pre-commit hooks installed!"

  clean:
    desc: Clean build artifacts and cache
    cmds:
      - rm -rf __pycache__/
      - rm -rf .pytest_cache/
      - rm -rf .coverage
      - rm -rf htmlcov/
      - rm -rf .mypy_cache/
      - rm -rf bandit-report.json
      - find . -type f -name "*.pyc" -delete
      - find . -type d -name "__pycache__" -delete
      - echo "✅ Cleanup completed!"

  start-spark:
    desc: Start local Spark History Server for testing
    interactive: true
    cmds:
      - ./start_local_spark_history.sh
      - echo "🔥 Spark History Server started!"

  start-spark-bg:
    desc: Start local Spark History Server in background
    silent: true
    cmds:
      - |
        echo "Starting Spark History Server in background..."
        nohup ./start_local_spark_history.sh > spark-history.log 2>&1 &
        sleep 3
        echo "✅ Spark History Server started (logs: spark-history.log)"

  start-mcp:
    desc: Start MCP server
    interactive: true
    cmds:
      - uv run main.py

  start-mcp-bg:
    desc: Start MCP server in background
    silent: true
    cmds:
      - |
        echo "Starting MCP server in background..."
        bash -c 'nohup uv run main.py > mcp-server.log 2>&1 &'
        sleep 2
        echo "✅ MCP server started (logs: mcp-server.log)"
    status:
      - pgrep -f "main.py" > /dev/null

  start-inspector:
    desc: Start MCP Inspector for testing
    interactive: true
    cmds:
      - echo "Starting MCP Inspector at http://localhost:6274"
      - echo "Press Ctrl+C to stop the inspector"
      - DANGEROUSLY_OMIT_AUTH=true npx --yes @modelcontextprotocol/inspector

  start-inspector-bg:
    desc: Start MCP Inspector in background
    silent: true
    cmds:
      - |
        echo "Starting MCP Inspector in background..."
        nohup sh -c 'DANGEROUSLY_OMIT_AUTH=true npx --yes @modelcontextprotocol/inspector' > inspector.log 2>&1 &
        sleep 3
        echo "✅ MCP Inspector started at http://localhost:6274"

  dev-all:
    desc: Start all development services and prepare for testing
    silent: true
    cmds:
      - task start-spark-bg
      - task start-mcp-bg
      - sleep 1
      - |
        echo ""
        echo "🎉 All services are running!"
        echo ""
        echo "🌐 Spark History Server: http://localhost:18080"
        echo "🚀 MCP Server: http://localhost:18888"
        echo ""
        echo "Next steps:"
        echo "  • Run: task start-inspector (foreground, press Ctrl+C to stop)"
        echo "  • Or: task start-inspector-bg (background)"
        echo "  • Then open: http://localhost:6274"
        echo ""
        echo "To stop all services: task stop-all"
        echo ""

  stop-all:
    desc: Stop all background services
    silent: true
    cmds:
      - |
        echo "Stopping all services..."
        pkill -f "start_local_spark_history.sh" || true
        pkill -f "main.py" || true
        pkill -f "inspector" || true
        docker stop spark-history-server 2>/dev/null || true
        sleep 1
        echo "✅ All services stopped!"

  validate:
    desc: Run all validation checks (lint, type-check, test)
    deps: [lint, test]
    cmds:
      - echo "✅ All validations passed!"

  ci:
    desc: Run full CI pipeline locally
    deps: [lint, test, security]
    cmds:
      - echo "✅ CI pipeline completed successfully!"

  dev-setup:
    desc: Complete development environment setup
    cmds:
      - task: install
      - task: pre-commit-install
      - echo "🎉 Development environment ready!"

  docker-build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.PROJECT_NAME}}:latest .
      - echo "🐳 Docker image built!"

  docker-run:
    desc: Run Docker container
    cmds:
      - docker run -p 18888:18888 {{.PROJECT_NAME}}:latest
      - echo "🐳 Docker container started!"

  docker-load:
    desc: Load Docker image into Kind cluster
    deps: [docker-build, create-cluster]
    cmds:
      - "{{.BIN_DIR}}/kind load docker-image {{.PROJECT_NAME}}:latest --name {{.KIND_CLUSTER_NAME}}"
      - echo "🐳 Docker image loaded into Kind cluster '{{.KIND_CLUSTER_NAME}}'"

  create-cluster:
    desc: Create a Kind cluster for spark-history-server-mcp
    deps: [install-kind, install-helm]
    interactive: true
    cmds:
      - |
        {{.BIN_DIR}}/kind create cluster --name {{.KIND_CLUSTER_NAME}} --kubeconfig {{.KUBECONFIG_PATH}} --config - <<EOF
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
          kubeadmConfigPatches:
          - |
            kind: InitConfiguration
            nodeRegistration:
              kubeletExtraArgs:
                node-labels: "ingress-ready=true"
          extraMounts:
          - hostPath: examples/basic/events
            containerPath: /mnt/events
          extraPortMappings:
          - containerPort: 31888
            hostPort: 18888
            protocol: TCP
          - containerPort: 31808
            hostPort: 18080
            protocol: TCP
        EOF
      - echo "Kind cluster '{{.KIND_CLUSTER_NAME}}' created with kubeconfig at {{.KUBECONFIG_PATH}}"
      - echo "📋 To connect to your cluster:"
      - echo "   export KUBECONFIG={{.KUBECONFIG_PATH}}"
      - echo "   kubectl get pods -n {{.NAMESPACE}}"
    status:
      - "{{.BIN_DIR}}/kind get clusters | grep -q '^{{.KIND_CLUSTER_NAME}}$'"

  install-chart:
    desc: Install the local Spark History Server MCP Helm chart to local Kind cluster with locally built image.
    deps: [install-helm, create-cluster, docker-load]
    vars:
      RELEASE_NAME: spark-history-server-mcp
      NAMESPACE: default
      VALUES_FILE: '{{.VALUES_FILE | default "tests/helm-values/local.yaml"}}'
    cmds:
      - |
        KUBECONFIG={{.KUBECONFIG_PATH}} {{.BIN_DIR}}/helm upgrade --install {{.RELEASE_NAME}} \
          --namespace {{.NAMESPACE}} \
          --create-namespace \
          -f {{.VALUES_FILE}} \
          ./deploy/kubernetes/helm/spark-history-mcp/
      - echo "⚓ Helm installation completed!"
      - echo "📋 To connect to your cluster:"
      - echo "   export KUBECONFIG={{.KUBECONFIG_PATH}}"
      - echo "   kubectl get pods -n {{.NAMESPACE}}"

  install-shs-chart:
    desc: Install the local Spark History Server MCP Helm chart to local Kind cluster
    deps: [install-helm, create-cluster]
    vars:
      RELEASE_NAME: spark-history-server
      NAMESPACE: default
      VALUES_FILE: '{{.VALUES_FILE | default "tests/helm-values/local-shs.yaml"}}'
    cmds:
      - KUBECONFIG={{.KUBECONFIG_PATH}} kubectl apply -f tests/helm-values/example-event-volume.yaml
      - |
        KUBECONFIG={{.KUBECONFIG_PATH}} {{.BIN_DIR}}/helm repo add spark-history-server {{.SHS_HELM_URL}}
        KUBECONFIG={{.KUBECONFIG_PATH}} {{.BIN_DIR}}/helm repo update
        KUBECONFIG={{.KUBECONFIG_PATH}} {{.BIN_DIR}}/helm upgrade --install {{.RELEASE_NAME}} \
          --namespace {{.NAMESPACE}} \
          --create-namespace \
          --version {{.SHS_HELM_VERSION}} \
          -f {{.VALUES_FILE}} \
          spark-history-server/spark-history-server
      - echo "⚓ Spark History Server chart installed!"

  docs-serve:
    desc: Serve documentation locally (if using mkdocs)
    cmds:
      - echo "📚 Documentation server would start here"
      - echo "💡 Consider adding mkdocs for documentation"

  benchmark:
    desc: Run performance benchmarks
    cmds:
      - echo "🏃 Running performance benchmarks..."
      - echo "💡 Add specific benchmark commands here"

  release-check:
    desc: Pre-release validation
    deps: [clean, install, ci]
    cmds:
      - echo "🚀 Release validation completed!"
      - echo "✅ Ready for release!"
